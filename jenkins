pipeline{

      agent any
        tools {
     jdk 'JAVA_HOME'
     maven 'M2_HOME'
  }
     
 environment {

         DOCKERHUB_CREDENTIALS = credentials('dockerhub')
	 }
	 
        stages{

            
		stage('Checkout GIT') {
            steps {
                echo 'Pulling... ';
                    git branch: 'syrine',
                        url : 'https://github.com/oumaimabenjammour/DevOps.git';
                       
                        
            }
        }
	
	stage('Cleaning the project') {     
            steps {
                    sh 'mvn -B -DskipTests clean package'

            }
        }
       


	       stage('Compiling the artifact') {             
            steps {
                echo "compiling"
                sh 'mvn compile'
            }
        }
		
		
		 stage('JUnit/Mockito'){
                steps {
                sh '''mvn -version
                mvn -B -DskipTests clean package'''
                sh 'mvn test'
                echo """les tests sont pris en charge"""
                }
		
            }
           
		     
		  stage("Code Quality Check via SonarQube") {
                       steps {
                         withSonarQubeEnv('sonar') {
                           sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=sonar
                         }
                       }
                     }
		     
		     
		     stage('Nexus') {      
            steps {
                sh 'mvn deploy'
            }
        }            

		       stage('Docker build') {
            steps{
                script{
                    sh 'docker build -t syrineslimeni/springprojet . '
                }
		
		
		
            }
        }

             stage("DockerLogin") {
                steps {
                sh 'docker login --username syrineslimeni --password dockerhubb'
                }
                }

   stage("DockerPush") {
                 steps {
                 sh 'docker push syrineslimeni/springprojet'
                }
                }
           
            stage("Send Email"){
           steps{
               emailext attachLog: true, body: "${env.BUILD_URL} has result ${currentBuild.result}", compressLog: true, subject: "Status of pipeline: ${currentBuild.fullDisplayName}", to: 'syrine.slimeni@esprit.tn'
           }
       }
        
     
      }
             

              stage("DockerCompose") {
                 steps {
                 sh 'docker-compose up -d '
                }
                }
		     } 
		     
		      post {
      	always {
      		sh 'docker logout'
      		emailext attachLog: true, body: "${env.BUILD_URL} has result ${currentBuild.result}", compressLog: true, subject: "Status of pipeline: ${currentBuild.fullDisplayName}", to: 'syrine.slimeni@esprit.tn'
          	emailext body: 'A Test EMail', recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: 'Test'
  		
      	}
      	
      }   
}
